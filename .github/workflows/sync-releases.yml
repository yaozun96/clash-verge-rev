name: Sync Upstream Releases (Latest 3)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时检测一次，可改成每天自动执行

permissions:
  contents: write

jobs:
  sync_releases:
    runs-on: ubuntu-latest

    steps:
      - name: 安装依赖
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq gh curl

      - name: 同步最近3个上游 Releases
        env:
          SRC_REPO: clash-verge-rev/clash-verge-rev
          DST_REPO: yaozun96/clash-verge-rev
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 开始同步上游最近3个正式版本..."

          # 获取最近 10 条 release 并过滤掉 Pre-release
          gh release list -R "$SRC_REPO" --limit 10 | grep -v "Pre-release" | grep -vE '^TITLE' | head -n 3 > releases.txt

          if [[ ! -s releases.txt ]]; then
            echo "❌ 未找到任何正式 release"
            exit 0
          fi

          echo "📋 将要同步的版本列表："
          cat releases.txt
          echo "--------------------------------"

          while read -r line; do
            tag=$(echo "$line" | awk '{print $3}')   # ✅ 第3列才是TAG
            if [[ -z "$tag" ]]; then
              continue
            fi

            echo "⚙️ 处理 Release: $tag"

            if gh release view "$tag" -R "$DST_REPO" &>/dev/null; then
              echo "✅ $tag 已存在，跳过。"
              continue
            fi

            echo "📦 获取上游 Release 信息..."
            if ! gh release view "$tag" -R "$SRC_REPO" --json name,body,assets > release.json; then
              echo "⚠️ 无法获取 $tag，跳过。"
              continue
            fi

            name=$(jq -r '.name' release.json)
            body=$(jq -r '.body' release.json)

            echo "🧩 创建 Release: $tag"
            gh release create "$tag" -R "$DST_REPO" -t "$name" -n "$body" || true

            assets=$(jq -r '.assets[].url' release.json)
            if [[ -z "$assets" ]]; then
              echo "⚠️ 没有附件，跳过上传。"
              continue
            fi

            echo "⬇️ 下载并上传附件..."
            for asset_url in $assets; do
              filename=$(basename "$asset_url")
              echo "📥 下载 $filename"
              curl -L -o "$filename" -H "Authorization: token $GITHUB_TOKEN" "$asset_url"
              echo "📤 上传 $filename"
              gh release upload "$tag" "$filename" -R "$DST_REPO" --clobber || true
            done

            echo "✅ 完成同步: $tag"
            echo "--------------------------------"
          done < releases.txt

          echo "🎉 所有最新3个版本同步完成。"
